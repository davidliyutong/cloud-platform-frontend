/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Defaults1 from './Defaults1';
import Description from './Description';
import Fields1 from './Fields1';
import ImageRef from './ImageRef';
import Name from './Name';
import TemplateStr from './TemplateStr';

/**
 * The TemplateUpdateRequest model module.
 * @module model/TemplateUpdateRequest
 * @version 1.0.0
 */
class TemplateUpdateRequest {
    /**
     * Constructs a new <code>TemplateUpdateRequest</code>.
     *      Update request for templates, all fields except template_id are optional.     
     * @alias module:model/TemplateUpdateRequest
     * @param templateId {String} 
     */
    constructor(templateId) { 
        
        TemplateUpdateRequest.initialize(this, templateId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, templateId) { 
        obj['template_id'] = templateId;
    }

    /**
     * Constructs a <code>TemplateUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateUpdateRequest} obj Optional instance to populate.
     * @return {module:model/TemplateUpdateRequest} The populated <code>TemplateUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateUpdateRequest();

            if (data.hasOwnProperty('template_id')) {
                obj['template_id'] = ApiClient.convertToType(data['template_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = Description.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('image_ref')) {
                obj['image_ref'] = ImageRef.constructFromObject(data['image_ref']);
            }
            if (data.hasOwnProperty('template_str')) {
                obj['template_str'] = TemplateStr.constructFromObject(data['template_str']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = Fields1.constructFromObject(data['fields']);
            }
            if (data.hasOwnProperty('defaults')) {
                obj['defaults'] = Defaults1.constructFromObject(data['defaults']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateUpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateUpdateRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['template_id'] && !(typeof data['template_id'] === 'string' || data['template_id'] instanceof String)) {
            throw new Error("Expected the field `template_id` to be a primitive type in the JSON string but got " + data['template_id']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          Description.validateJSON(data['description']);
        }
        // validate the optional field `image_ref`
        if (data['image_ref']) { // data not null
          ImageRef.validateJSON(data['image_ref']);
        }
        // validate the optional field `template_str`
        if (data['template_str']) { // data not null
          TemplateStr.validateJSON(data['template_str']);
        }
        // validate the optional field `fields`
        if (data['fields']) { // data not null
          Fields1.validateJSON(data['fields']);
        }
        // validate the optional field `defaults`
        if (data['defaults']) { // data not null
          Defaults1.validateJSON(data['defaults']);
        }

        return true;
    }


}

TemplateUpdateRequest.RequiredProperties = ["template_id"];

/**
 * @member {String} template_id
 */
TemplateUpdateRequest.prototype['template_id'] = undefined;

/**
 * @member {module:model/Name} name
 */
TemplateUpdateRequest.prototype['name'] = undefined;

/**
 * @member {module:model/Description} description
 */
TemplateUpdateRequest.prototype['description'] = undefined;

/**
 * @member {module:model/ImageRef} image_ref
 */
TemplateUpdateRequest.prototype['image_ref'] = undefined;

/**
 * @member {module:model/TemplateStr} template_str
 */
TemplateUpdateRequest.prototype['template_str'] = undefined;

/**
 * @member {module:model/Fields1} fields
 */
TemplateUpdateRequest.prototype['fields'] = undefined;

/**
 * @member {module:model/Defaults1} defaults
 */
TemplateUpdateRequest.prototype['defaults'] = undefined;






export default TemplateUpdateRequest;

