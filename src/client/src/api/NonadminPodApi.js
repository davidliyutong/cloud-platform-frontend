/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PodCreateRequest from '../model/PodCreateRequest';
import PodCreateResponse from '../model/PodCreateResponse';
import PodDeleteResponse from '../model/PodDeleteResponse';
import PodGetResponse from '../model/PodGetResponse';
import PodListResponse from '../model/PodListResponse';
import PodUpdateRequest from '../model/PodUpdateRequest';
import PodUpdateResponse from '../model/PodUpdateResponse';

/**
* NonadminPod service.
* @module api/NonadminPodApi
* @version 1.0.0
*/
export default class NonadminPodApi {

    /**
    * Constructs a new NonadminPodApi. 
    * @alias module:api/NonadminPodApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletenonadminPodNonadminPodDelete operation.
     * @callback module:api/NonadminPodApi~deletenonadminPodNonadminPodDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pod owned by the user.
     * @param {String} podId 
     * @param {module:api/NonadminPodApi~deletenonadminPodNonadminPodDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodDeleteResponse}
     */
    deletenonadminPodNonadminPodDelete(podId, callback) {
      let postBody = null;
      // verify the required parameter 'podId' is set
      if (podId === undefined || podId === null) {
        throw new Error("Missing the required parameter 'podId' when calling deletenonadminPodNonadminPodDelete");
      }

      let pathParams = {
        'pod_id': podId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodDeleteResponse;
      return this.apiClient.callApi(
        '/v1/pods/{pod_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getnonadminPodNonadminPodGet operation.
     * @callback module:api/NonadminPodApi~getnonadminPodNonadminPodGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pod owned by the user.
     * @param {String} podId 
     * @param {module:api/NonadminPodApi~getnonadminPodNonadminPodGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodGetResponse}
     */
    getnonadminPodNonadminPodGet(podId, callback) {
      let postBody = null;
      // verify the required parameter 'podId' is set
      if (podId === undefined || podId === null) {
        throw new Error("Missing the required parameter 'podId' when calling getnonadminPodNonadminPodGet");
      }

      let pathParams = {
        'pod_id': podId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodGetResponse;
      return this.apiClient.callApi(
        '/v1/pods/{pod_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getnonadminPodNonadminPodList operation.
     * @callback module:api/NonadminPodApi~getnonadminPodNonadminPodListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all pods. Only pods owned by the user will be returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [indexStart] 
     * @param {Number} [indexEnd] 
     * @param {String} [extraQueryFilter] 
     * @param {module:api/NonadminPodApi~getnonadminPodNonadminPodListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodListResponse}
     */
    getnonadminPodNonadminPodList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'index_start': opts['indexStart'],
        'index_end': opts['indexEnd'],
        'extra_query_filter': opts['extraQueryFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodListResponse;
      return this.apiClient.callApi(
        '/v1/pods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postnonadminPodNonadminPodCreate operation.
     * @callback module:api/NonadminPodApi~postnonadminPodNonadminPodCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pod owned by the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/PodCreateRequest} [podCreateRequest] 
     * @param {module:api/NonadminPodApi~postnonadminPodNonadminPodCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodCreateResponse}
     */
    postnonadminPodNonadminPodCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['podCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PodCreateResponse;
      return this.apiClient.callApi(
        '/v1/pods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putnonadminPodNonadminPodUpdate operation.
     * @callback module:api/NonadminPodApi~putnonadminPodNonadminPodUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pod owned by the user.
     * @param {String} podId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PodUpdateRequest} [podUpdateRequest] 
     * @param {module:api/NonadminPodApi~putnonadminPodNonadminPodUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodUpdateResponse}
     */
    putnonadminPodNonadminPodUpdate(podId, opts, callback) {
      opts = opts || {};
      let postBody = opts['podUpdateRequest'];
      // verify the required parameter 'podId' is set
      if (podId === undefined || podId === null) {
        throw new Error("Missing the required parameter 'podId' when calling putnonadminPodNonadminPodUpdate");
      }

      let pathParams = {
        'pod_id': podId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PodUpdateResponse;
      return this.apiClient.callApi(
        '/v1/pods/{pod_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
