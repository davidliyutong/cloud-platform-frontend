/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginCredential1 from '../model/LoginCredential1';
import TokenResponse1 from '../model/TokenResponse1';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getauthBasic operation.
     * @callback module:api/AuthApi~getauthBasicCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic auth for any user
     * @param {module:api/AuthApi~getauthBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getauthBasic(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/auth/basic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getauthBasicUser operation.
     * @callback module:api/AuthApi~getauthBasicUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic auth for specific user
     * @param {String} username 
     * @param {module:api/AuthApi~getauthBasicUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getauthBasicUser(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getauthBasicUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/auth/basic/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getauthTokenValidateUser operation.
     * @callback module:api/AuthApi~getauthTokenValidateUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This function validates the token in:
     * - header.Authorization<br>- urlParam.clpl_auth_token<br><br>If the validation succeed, return 200 OK and set cookie clpl_auth_token=${JWT}
     * @param {String} username 
     * @param {module:api/AuthApi~getauthTokenValidateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getauthTokenValidateUser(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getauthTokenValidateUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/auth/token/validate/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postauthTokenLogin operation.
     * @callback module:api/AuthApi~postauthTokenLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this is a hack to assign 10yr valid token to user
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginCredential1} [loginCredential1] 
     * @param {module:api/AuthApi~postauthTokenLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse1}
     */
    postauthTokenLogin(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginCredential1'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenResponse1;
      return this.apiClient.callApi(
        '/v1/auth/token/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postauthTokenRefresh operation.
     * @callback module:api/AuthApi~postauthTokenRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this is a hack to verify the long-term token and sign short term token
     * @param {module:api/AuthApi~postauthTokenRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse1}
     */
    postauthTokenRefresh(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenResponse1;
      return this.apiClient.callApi(
        '/v1/auth/token/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
