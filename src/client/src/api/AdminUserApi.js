/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserCreateRequest from '../model/UserCreateRequest';
import UserCreateResponse from '../model/UserCreateResponse';
import UserDeleteResponse from '../model/UserDeleteResponse';
import UserGetResponse from '../model/UserGetResponse';
import UserListResponse from '../model/UserListResponse';
import UserUpdateRequest from '../model/UserUpdateRequest';
import UserUpdateResponse from '../model/UserUpdateResponse';

/**
* AdminUser service.
* @module api/AdminUserApi
* @version 1.0.0
*/
export default class AdminUserApi {

    /**
    * Constructs a new AdminUserApi. 
    * @alias module:api/AdminUserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteadminUserAdminUserDelete operation.
     * @callback module:api/AdminUserApi~deleteadminUserAdminUserDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user. This will mark the user as deleted.
     * @param {String} username 
     * @param {module:api/AdminUserApi~deleteadminUserAdminUserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDeleteResponse}
     */
    deleteadminUserAdminUserDelete(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteadminUserAdminUserDelete");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserDeleteResponse;
      return this.apiClient.callApi(
        '/v1/admin/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getadminUserAdminUserGet operation.
     * @callback module:api/AdminUserApi~getadminUserAdminUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user.
     * @param {String} username 
     * @param {module:api/AdminUserApi~getadminUserAdminUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGetResponse}
     */
    getadminUserAdminUserGet(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getadminUserAdminUserGet");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGetResponse;
      return this.apiClient.callApi(
        '/v1/admin/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getadminUserAdminUserList operation.
     * @callback module:api/AdminUserApi~getadminUserAdminUserListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users.
     * @param {Object} opts Optional parameters
     * @param {Number} [indexStart] 
     * @param {Number} [indexEnd] 
     * @param {String} [extraQueryFilter] 
     * @param {module:api/AdminUserApi~getadminUserAdminUserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserListResponse}
     */
    getadminUserAdminUserList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'index_start': opts['indexStart'],
        'index_end': opts['indexEnd'],
        'extra_query_filter': opts['extraQueryFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserListResponse;
      return this.apiClient.callApi(
        '/v1/admin/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postadminUserAdminUserCreate operation.
     * @callback module:api/AdminUserApi~postadminUserAdminUserCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCreateRequest} [userCreateRequest] 
     * @param {module:api/AdminUserApi~postadminUserAdminUserCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCreateResponse}
     */
    postadminUserAdminUserCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['userCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserCreateResponse;
      return this.apiClient.callApi(
        '/v1/admin/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putadminUserAdminUserUpdate operation.
     * @callback module:api/AdminUserApi~putadminUserAdminUserUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user.
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUpdateRequest} [userUpdateRequest] 
     * @param {module:api/AdminUserApi~putadminUserAdminUserUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserUpdateResponse}
     */
    putadminUserAdminUserUpdate(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['userUpdateRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling putadminUserAdminUserUpdate");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserUpdateResponse;
      return this.apiClient.callApi(
        '/v1/admin/users/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
